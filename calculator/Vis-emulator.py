# Vis APGsembly code emulator, version 0.6 (beta)
# Version 0.314159+: Write 99 bottles of beer first line 
# Version 0.5: add support for "ZZ" and "*" preprocessor formats, mostly copied from APGompiler.py
# Version 0.6: Michael Simkin's visualizations for all calculator components. Writes 99 bottles of beer. 

import golly as g
from glife.text import make_text
import types

let2cells =	{'$': [2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 3, 2, 4, 5, 2, 4, 1, 3, 4, 3, 3, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 3, 5, 4, 5, 5, 4, 1, 6, 4, 3, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4], '(': [3, 1, 4, 2, 2, 4, 1, 3, 4, 1, 4, 4, 1, 5, 4, 2, 6, 4, 3, 7, 4], ',': [1, 6, 4, 2, 6, 4, 2, 7, 4], '0': [2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 4, 3, 4, 5, 3, 4, 1, 4, 4, 3, 4, 4, 5, 4, 4, 1, 5, 4, 2, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4], '4': [4, 1, 4, 3, 2, 4, 4, 2, 4, 2, 3, 4, 4, 3, 4, 1, 4, 4, 4, 4, 4, 1, 5, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 4, 6, 4, 4, 7, 4, 0], '8': [2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4], '<': [1, 1, 4, 2, 1, 4, 2, 2, 4, 2, 3, 4, 3, 4, 4, 2, 5, 4, 2, 6, 4, 1, 7, 4, 2, 7, 4], '@': [2, 1, 4, 3, 1, 4, 4, 1, 4, 5, 1, 4, 6, 1, 4, 1, 2, 4, 7, 2, 4, 1, 3, 4, 3, 3, 4, 4, 3, 4, 5, 3, 4, 7, 3, 4, 1, 4, 4, 3, 4, 4, 5, 4, 4, 7, 4, 4, 1, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 6, 5, 4, 7, 5, 4, 1, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 5, 7, 4, 6, 7, 4, 0], 'D': [1, 1, 4, 2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 0], 'H': [1, 1, 4, 5, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4], 'L': [1, 1, 4, 1, 2, 4, 1, 3, 4, 1, 4, 4, 1, 5, 4, 1, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 5, 7, 4], 'P': [1, 1, 4, 2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 1, 6, 4, 1, 7, 4], 'T': [1, 1, 4, 2, 1, 4, 3, 1, 4, 4, 1, 4, 5, 1, 4, 3, 2, 4, 3, 3, 4, 3, 4, 4, 3, 5, 4, 3, 6, 4, 3, 7, 4], 'X': [1, 1, 4, 5, 1, 4, 1, 2, 4, 5, 2, 4, 2, 3, 4, 4, 3, 4, 3, 4, 4, 2, 5, 4, 4, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4], '\\': [1, 1, 4, 1, 2, 4, 2, 3, 4, 2, 4, 4, 2, 5, 4, 3, 6, 4, 3, 7, 4], 'd': [5, 1, 4, 5, 2, 4, 2, 3, 4, 3, 3, 4, 5, 3, 4, 1, 4, 4, 4, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 5, 7, 4, 0], 'h': [1, 1, 4, 1, 2, 4, 1, 3, 4, 3, 3, 4, 4, 3, 4, 1, 4, 4, 2, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 0], 'l': [1, 1, 4, 2, 1, 4, 2, 2, 4, 2, 3, 4, 2, 4, 4, 2, 5, 4, 2, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4, 0], 'p': [1, 3, 4, 2, 3, 4, 3, 3, 4, 4, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 1, 6, 4, 1, 7, 4, 0], 't': [2, 1, 4, 2, 2, 4, 1, 3, 4, 2, 3, 4, 3, 3, 4, 2, 4, 4, 2, 5, 4, 2, 6, 4, 5, 6, 4, 3, 7, 4, 4, 7, 4], 'x': [1, 3, 4, 5, 3, 4, 2, 4, 4, 4, 4, 4, 3, 5, 4, 2, 6, 4, 4, 6, 4, 1, 7, 4, 5, 7, 4], '#': [2, 1, 4, 4, 1, 4, 1, 2, 4, 2, 2, 4, 3, 2, 4, 4, 2, 4, 5, 2, 4, 2, 3, 4, 4, 3, 4, 2, 4, 4, 4, 4, 4, 2, 5, 4, 4, 5, 4, 1, 6, 4, 2, 6, 4, 3, 6, 4, 4, 6, 4, 5, 6, 4, 2, 7, 4, 4, 7, 4, 0], "'": [1, 1, 4, 1, 2, 4, 0], '+': [3, 2, 4, 3, 3, 4, 1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4, 3, 5, 4, 3, 6, 4], '/': [3, 1, 4, 3, 2, 4, 2, 3, 4, 2, 4, 4, 2, 5, 4, 1, 6, 4, 1, 7, 4], '3': [1, 1, 4, 2, 1, 4, 3, 1, 4, 4, 1, 4, 5, 1, 4, 4, 2, 4, 3, 3, 4, 4, 4, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 0], '7': [1, 1, 4, 2, 1, 4, 3, 1, 4, 4, 1, 4, 5, 1, 4, 5, 2, 4, 4, 3, 4, 3, 4, 4, 2, 5, 4, 2, 6, 4, 2, 7, 4], ';': [2, 2, 4, 1, 6, 4, 2, 6, 4, 2, 7, 4, 0], '?': [2, 1, 4, 3, 1, 4, 1, 2, 4, 4, 2, 4, 4, 3, 4, 3, 4, 4, 2, 5, 4, 2, 7, 4, 0], 'C': [2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 1, 4, 4, 1, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4], 'G': [2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 1, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 5, 7, 4, 0], 'K': [1, 1, 4, 5, 1, 4, 1, 2, 4, 4, 2, 4, 1, 3, 4, 3, 3, 4, 1, 4, 4, 2, 4, 4, 1, 5, 4, 3, 5, 4, 1, 6, 4, 4, 6, 4, 1, 7, 4, 5, 7, 4, 0], 'O': [2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 0], 'S': [2, 1, 4, 3, 1, 4, 4, 1, 4, 5, 1, 4, 1, 2, 4, 1, 3, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 5, 5, 4, 5, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4], 'W': [1, 1, 4, 5, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 3, 4, 4, 5, 4, 4, 1, 5, 4, 3, 5, 4, 5, 5, 4, 1, 6, 4, 3, 6, 4, 5, 6, 4, 2, 7, 4, 4, 7, 4], '[': [1, 1, 4, 2, 2, 4, 3, 3, 4, 4, 4, 4, 3, 5, 4, 2, 6, 4, 1, 7, 4], '_': [1, 7, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 0], 'c': [2, 3, 4, 3, 3, 4, 4, 3, 4, 1, 4, 4, 1, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 0], 'g': [2, 2, 4, 3, 2, 4, 4, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 0], 'k': [1, 1, 4, 1, 2, 4, 1, 3, 4, 4, 3, 4, 1, 4, 4, 3, 4, 4, 1, 5, 4, 2, 5, 4, 1, 6, 4, 3, 6, 4, 1, 7, 4, 4, 7, 4, 0], 'o': [2, 3, 4, 3, 3, 4, 4, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 0], 's': [2, 3, 4, 3, 3, 4, 4, 3, 4, 1, 4, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 0], 'w': [1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 3, 5, 4, 5, 5, 4, 1, 6, 4, 3, 6, 4, 5, 6, 4, 2, 7, 4, 4, 7, 4, 0], '{': [1, 1, 4, 1, 2, 4, 1, 3, 4, 1, 4, 4, 1, 5, 4, 1, 6, 4, 1, 7, 4], '"': [1, 1, 4, 3, 1, 4, 1, 2, 4, 3, 2, 4, 0], '&': [1, 1, 4, 2, 1, 4, 3, 1, 4, 1, 2, 4, 3, 2, 4, 1, 3, 4, 3, 3, 4, 2, 4, 4, 1, 5, 4, 3, 5, 4, 4, 5, 4, 6, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 6, 7, 4, 0], '*': [3, 1, 4, 1, 2, 4, 3, 2, 4, 5, 2, 4, 2, 3, 4, 3, 3, 4, 4, 3, 4, 3, 4, 4, 2, 5, 4, 4, 5, 4, 1, 6, 4, 5, 6, 4, 0], '.': [1, 6, 4, 2, 6, 4, 1, 7, 4, 2, 7, 4, 0], '2': [2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 5, 3, 4, 4, 4, 4, 3, 5, 4, 2, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 5, 7, 4, 0], '6': [3, 1, 4, 4, 1, 4, 2, 2, 4, 1, 3, 4, 1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4], ':': [1, 2, 4, 1, 6, 4, 0], '>': [4, 1, 4, 3, 2, 4, 2, 3, 4, 1, 4, 4, 2, 5, 4, 3, 6, 4, 4, 7, 4], 'B': [1, 1, 4, 2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 0], 'F': [1, 1, 4, 2, 1, 4, 3, 1, 4, 4, 1, 4, 5, 1, 4, 1, 2, 4, 1, 3, 4, 1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 1, 6, 4, 1, 7, 4, 0], 'J': [3, 1, 4, 4, 1, 4, 5, 1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 1, 6, 4, 4, 6, 4, 2, 7, 4, 3, 7, 4], 'N': [1, 1, 4, 5, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 2, 3, 4, 5, 3, 4, 1, 4, 4, 3, 4, 4, 5, 4, 4, 1, 5, 4, 4, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4], 'R': [1, 1, 4, 2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 3, 5, 4, 1, 6, 4, 4, 6, 4, 1, 7, 4, 5, 7, 4, 0], 'V': [1, 1, 4, 5, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 2, 5, 4, 4, 5, 4, 2, 6, 4, 4, 6, 4, 3, 7, 4], 'Z': [1, 1, 4, 2, 1, 4, 3, 1, 4, 4, 1, 4, 5, 1, 4, 5, 2, 4, 4, 3, 4, 3, 4, 4, 2, 5, 4, 1, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 5, 7, 4], 'b': [1, 1, 4, 1, 2, 4, 1, 3, 4, 3, 3, 4, 4, 3, 4, 1, 4, 4, 2, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 0], 'f': [3, 0, 4, 4, 0, 4, 2, 1, 4, 5, 1, 4, 2, 2, 4, 2, 3, 4, 1, 4, 4, 2, 4, 4, 3, 4, 4, 2, 5, 4, 2, 6, 4, 2, 7, 4, 0], 'j': [4, 1, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 1, 6, 4, 4, 6, 4, 2, 7, 4, 3, 7, 4, 0], 'n': [1, 3, 4, 3, 3, 4, 4, 3, 4, 1, 4, 4, 2, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 0], 'r': [1, 3, 4, 3, 3, 4, 4, 3, 4, 1, 4, 4, 2, 4, 4, 5, 4, 4, 1, 5, 4, 1, 6, 4, 1, 7, 4], 'v': [1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 2, 6, 4, 4, 6, 4, 3, 7, 4], 'z': [1, 3, 4, 2, 3, 4, 3, 3, 4, 4, 3, 4, 5, 3, 4, 4, 4, 4, 3, 5, 4, 2, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 5, 7, 4], '~': [3, 3, 4, 1, 5, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 3, 7, 4], '!': [1, 1, 4, 1, 2, 4, 1, 3, 4, 1, 4, 4, 1, 5, 4, 1, 7, 4, 0], '%': [1, 1, 4, 2, 1, 4, 5, 1, 4, 1, 2, 4, 2, 2, 4, 4, 2, 4, 4, 3, 4, 3, 4, 4, 2, 5, 4, 2, 6, 4, 4, 6, 4, 5, 6, 4, 1, 7, 4, 4, 7, 4, 5, 7, 4], ')': [1, 1, 4, 2, 2, 4, 3, 3, 4, 3, 4, 4, 3, 5, 4, 2, 6, 4, 1, 7, 4], '-': [1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4], '1': [2, 1, 4, 1, 2, 4, 2, 2, 4, 2, 3, 4, 2, 4, 4, 2, 5, 4, 2, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4, 0], '5': [1, 1, 4, 2, 1, 4, 3, 1, 4, 4, 1, 4, 5, 1, 4, 1, 2, 4, 1, 3, 4, 2, 3, 4, 3, 3, 4, 4, 3, 4, 5, 4, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4], '9': [2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4, 5, 5, 4, 4, 6, 4, 2, 7, 4, 3, 7, 4], '=': [1, 3, 4, 2, 3, 4, 3, 3, 4, 4, 3, 4, 5, 3, 4, 1, 5, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 0], 'A': [2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 0], 'E': [1, 1, 4, 2, 1, 4, 3, 1, 4, 4, 1, 4, 5, 1, 4, 1, 2, 4, 1, 3, 4, 1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 1, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 5, 7, 4, 0], 'I': [1, 1, 4, 2, 1, 4, 3, 1, 4, 2, 2, 4, 2, 3, 4, 2, 4, 4, 2, 5, 4, 2, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4], 'M': [1, 1, 4, 5, 1, 4, 1, 2, 4, 2, 2, 4, 4, 2, 4, 5, 2, 4, 1, 3, 4, 3, 3, 4, 5, 3, 4, 1, 4, 4, 3, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 0], 'Q': [2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 3, 5, 4, 5, 5, 4, 1, 6, 4, 4, 6, 4, 2, 7, 4, 3, 7, 4, 5, 7, 4], 'U': [1, 1, 4, 5, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4], 'Y': [1, 1, 4, 5, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 2, 4, 4, 4, 4, 4, 3, 5, 4, 3, 6, 4, 3, 7, 4], ']': [1, 1, 4, 2, 1, 4, 1, 2, 4, 1, 3, 4, 1, 4, 4, 1, 5, 4, 1, 6, 4, 1, 7, 4, 2, 7, 4], 'a': [2, 3, 4, 3, 3, 4, 4, 3, 4, 5, 4, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 5, 7, 4, 0], 'e': [2, 3, 4, 3, 3, 4, 4, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 1, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 0], 'i': [2, 1, 4, 1, 3, 4, 2, 3, 4, 2, 4, 4, 2, 5, 4, 2, 6, 4, 1, 7, 4, 2, 7, 4, 3, 7, 4], 'm': [1, 3, 4, 2, 3, 4, 4, 3, 4, 1, 4, 4, 3, 4, 4, 5, 4, 4, 1, 5, 4, 3, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4], 'q': [2, 3, 4, 3, 3, 4, 5, 3, 4, 1, 4, 4, 4, 4, 4, 5, 4, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 5, 6, 4, 5, 7, 4, 0], 'u': [1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4], 'y': [1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 0], '}': [2, 1, 4, 3, 1, 4, 2, 2, 4, 2, 3, 4, 1, 4, 4, 2, 5, 4, 2, 6, 4, 2, 7, 4, 3, 7, 4], ' ': []}

APGsembly = """INITIAL; *; R0; INC SQX, INC SQY, NOP
# ---- T7 Letter Setup ---- 

R0; *; R1; TDEC R7 
R1; Z; R1; HALT
R1; NZ; R2; READ T7
R2; Z; A0; RESET T7, INC T7 
R2; NZ; L0; SET T7, INC T7 

# ----- Next letter ---- 

L0; *; L1; READ T6
L1; Z; L2; RESET T6, INC T6
L1; NZ; L5; SET T6, INC T6
L2; *; L3; READ T6
L3; Z; R0; RESET T6, INC T6
L3; NZ; L6; SET T6, INC T6
L5; *; L6; INC T6
L6; *; L0; INC T6

# --- Printing letter from T6 --- 
A0; *; A1; READ T6
A1; Z; X0; RESET T6, INC T6
A1; NZ; X1; SET T6, INC T6
X0; *; Y0; READ T6
Y0; Z; X00; RESET T6, INC T6
Y0; NZ; X01; SET T6, INC T6
X01; *; Y01; READ T6
Y01; Z; A0; INC SQX, RESET T6, INC T6
Y01; NZ; Z01; DEC SQX, SET T6
Z01; *; A0; INC T6
X1; *; Y1; READ T6
Y1; Z; X10; RESET T6, INC T6
Y1; NZ; X11; SET T6, INC T6
X10; *; Y10; READ T6
Y10; Z; A0; INC SQY, RESET T6, INC T6
Y10; NZ; Z10; DEC SQY, SET T6
Z10; *; A0; INC T6
X11; *; Y11; READ T6
Y11; Z; X110; READ SQ, RESET T6
Y11; NZ; A0; SET T6, SET SQ, INC T6
X110; *; A0; INC T6
X00; *; RX; DEC T6
RX; Z; R0; NOP
RX; NZ; RX; DEC T6
"""

program = {}
registers = {}
reg2x = {}
lastx = 0 
memory = {}
progname = "Write Song"

def Write(L, dx = 0, dy = 0):
        d = 0
        for i in range(len(L)):
                g.putcells(let2cells[L[i]], dx + d, dy)
                d += 6
        
mullookup = {"MUL0 00000":["Z", "00000"],"MUL1 00000":["Z", "00101"],"MUL0 00001":["NZ", "00000"],"MUL1 00001":["NZ", "00101"],
                         "MUL0 00010":["Z", "00001"],"MUL1 00010":["Z", "00110"],"MUL0 00011":["NZ", "00001"],"MUL1 00011":["NZ", "00110"],
                         "MUL0 00100":["Z", "00010"],"MUL1 00100":["Z", "00111"],"MUL0 00101":["NZ", "00010"],"MUL1 00101":["NZ", "00111"],
                         "MUL0 00110":["Z", "00011"],"MUL1 00110":["Z", "01000"],"MUL0 00111":["NZ", "00011"],"MUL1 00111":["NZ", "01000"],
                         "MUL0 01000":["Z", "00100"],"MUL1 01000":["Z", "01001"],"MUL0 01001":["NZ", "00100"],"MUL1 01001":["NZ", "01001"],
                         "MUL0 01010":["Z", "00101"],"MUL1 01010":["Z", "01010"],"MUL0 01011":["NZ", "00101"],"MUL1 01011":["NZ", "01010"],
                         "MUL0 01100":["Z", "00110"],"MUL1 01100":["Z", "01011"],"MUL0 01101":["NZ", "00110"],"MUL1 01101":["NZ", "01011"],
                         "MUL0 01110":["Z", "00111"],"MUL1 01110":["Z", "01100"],"MUL0 01111":["NZ", "00111"],"MUL1 01111":["NZ", "01100"],
                         "MUL0 10000":["Z", "01000"],"MUL1 10000":["Z", "01101"],"MUL0 10001":["NZ", "01000"],"MUL1 10001":["NZ", "01101"],
                         "MUL0 10010":["Z", "01001"],"MUL1 10010":["Z", "01110"],"MUL0 10011":["NZ", "01001"],"MUL1 10011":["NZ", "01110"],
                         "MUL0 10100":["Z", "01010"],"MUL1 10100":["Z", "01111"],"MUL0 10101":["NZ", "01010"],"MUL1 10101":["NZ", "01111"],
                         "MUL0 10110":["Z", "01011"],"MUL1 10110":["Z", "00000"],"MUL0 10111":["NZ", "01011"],"MUL1 10111":["NZ", "00000"],
                         "MUL0 11000":["Z", "01100"],"MUL1 11000":["Z", "00001"],"MUL0 11001":["NZ", "01100"],"MUL1 11001":["NZ", "00001"],
                         "MUL0 11010":["Z", "01101"],"MUL1 11010":["Z", "00010"],"MUL0 11011":["NZ", "01101"],"MUL1 11011":["NZ", "00010"],
                         "MUL0 11100":["Z", "01110"],"MUL1 11100":["Z", "00011"],"MUL0 11101":["NZ", "01110"],"MUL1 11101":["NZ", "00011"],
                         "MUL0 11110":["Z", "01111"],"MUL1 11110":["Z", "00100"],"MUL0 11111":["NZ", "01111"],"MUL1 11111":["NZ", "00100"]}

addlookup = {"000 bit0 A1":["NONE","010 bit1"],"000 bit0 B1":["NZ","000 bit0"],"000 bit0 B0":["Z","000 bit0"],
                         "000 bit1 A1":["NONE","010 bit0"],"000 bit1 B1":["Z","000 bit0"],"000 bit1 B0":["NZ","000 bit0"],
                         "001 bit0 A1":["NONE","011 bit1"],"001 bit0 B1":["NZ","000 bit0"],"001 bit0 B0":["Z","000 bit0"],
                         "001 bit1 A1":["NONE","011 bit0"],"001 bit1 B1":["Z","000 bit0"],"001 bit1 B0":["NZ","000 bit0"],
                         "010 bit0 A1":["NONE","000 bit1"],"010 bit0 B1":["NZ","100 bit1"],"010 bit0 B0":["Z","000 bit0"],
                         "010 bit1 A1":["NONE","000 bit0"],"010 bit1 B1":["Z","100 bit1"],"010 bit1 B0":["NZ","000 bit0"],
                         "011 bit0 A1":["NONE","001 bit1"],"011 bit0 B1":["NZ","000 bit0"],"011 bit0 B0":["Z","100 bit1"],
                         "011 bit1 A1":["NONE","001 bit0"],"011 bit1 B1":["Z","000 bit0"],"011 bit1 B0":["NZ","100 bit1"],
                         "100 bit0 A1":["NONE","110 bit1"],"100 bit0 B1":["NZ","100 bit1"],"100 bit0 B0":["Z","000 bit0"],
                         "100 bit1 A1":["NONE","110 bit0"],"100 bit1 B1":["Z","100 bit1"],"100 bit1 B0":["NZ","000 bit0"],
                         "101 bit0 A1":["NONE","111 bit1"],"101 bit0 B1":["NZ","000 bit0"],"101 bit0 B0":["Z","100 bit1"],
                         "101 bit1 A1":["NONE","111 bit0"],"101 bit1 B1":["Z","000 bit0"],"101 bit1 B0":["NZ","100 bit1"],
                         "110 bit0 A1":["NONE","100 bit1"],"110 bit0 B1":["NZ","100 bit1"],"110 bit0 B0":["Z","100 bit1"],
                         "110 bit1 A1":["NONE","100 bit0"],"110 bit1 B1":["Z","100 bit1"],"110 bit1 B0":["NZ","100 bit1"],
                         "111 bit0 A1":["NONE","101 bit1"],"111 bit0 B1":["NZ","100 bit1"],"111 bit0 B0":["Z","100 bit1"],
                         "111 bit1 A1":["NONE","101 bit0"],"111 bit1 B1":["Z","100 bit1"],"111 bit1 B0":["NZ","100 bit1"]}

sublookup = {"000 stopper0 bit0 A1":["NONE","000 stopper1 bit1"],"000 stopper0 bit0 B0":["Z","000 stopper0 bit0"],
                         "000 stopper0 bit0 B1":["NZ","100 stopper0 bit1"],"000 stopper0 bit1 A1":["NONE","000 stopper1 bit0"],
                         "000 stopper0 bit1 B0":["NZ","000 stopper0 bit0"],"000 stopper0 bit1 B1":["Z","100 stopper0 bit1"],
                         "000 stopper1 bit0 A1":["NONE","FAILURE"],"000 stopper1 bit0 B0":["Z","000 stopper0 bit0"],
                         "000 stopper1 bit0 B1":["NZ","000 stopper0 bit0"],"000 stopper1 bit1 A1":["NONE","FAILURE"],
                         "000 stopper1 bit1 B0":["NZ","000 stopper0 bit0"],"000 stopper1 bit1 B1":["Z","000 stopper0 bit0"],
                         "001 stopper0 bit0 A1":["NONE","001 stopper1 bit1"],"001 stopper0 bit0 B0":["Z","100 stopper0 bit1"],
                         "001 stopper0 bit0 B1":["NZ","000 stopper0 bit0"],"001 stopper0 bit1 A1":["NONE","001 stopper1 bit0"],
                         "001 stopper0 bit1 B0":["NZ","100 stopper0 bit1"],"001 stopper0 bit1 B1":["Z","000 stopper0 bit0"],
                         "001 stopper1 bit0 A1":["NONE","FAILURE"],"001 stopper1 bit0 B0":["Z","000 stopper0 bit0"],
                         "001 stopper1 bit0 B1":["NZ","000 stopper0 bit0"],"001 stopper1 bit1 A1":["NONE","FAILURE"],
                         "001 stopper1 bit1 B0":["NZ","000 stopper0 bit0"],"001 stopper1 bit1 B1":["Z","000 stopper0 bit0"],
                         "010 stopper0 bit0 A1":["NONE","010 stopper1 bit1"],"010 stopper0 bit0 B0":["Z","000 stopper0 bit0"],
                         "010 stopper0 bit0 B1":["NZ","000 stopper0 bit0"],"010 stopper0 bit1 A1":["NONE","010 stopper1 bit0"],
                         "010 stopper0 bit1 B0":["NZ","000 stopper0 bit0"],"010 stopper0 bit1 B1":["Z","000 stopper0 bit0"],
                         "010 stopper1 bit0 A1":["NONE","FAILURE"],"010 stopper1 bit0 B0":["Z","000 stopper0 bit0"],
                         "010 stopper1 bit0 B1":["NZ","100 stopper0 bit1"],"010 stopper1 bit1 A1":["NONE","FAILURE"],
                         "010 stopper1 bit1 B0":["NZ","000 stopper0 bit0"],"010 stopper1 bit1 B1":["Z","100 stopper0 bit1"],
                         "011 stopper0 bit0 A1":["NONE","011 stopper1 bit1"],"011 stopper0 bit0 B0":["Z","000 stopper0 bit0"],
                         "011 stopper0 bit0 B1":["NZ","000 stopper0 bit0"],"011 stopper0 bit1 A1":["NONE","011 stopper1 bit0"],
                         "011 stopper0 bit1 B0":["NZ","000 stopper0 bit0"],"011 stopper0 bit1 B1":["Z","000 stopper0 bit0"],
                         "011 stopper1 bit0 A1":["NONE","FAILURE"],"011 stopper1 bit0 B0":["Z","100 stopper0 bit1"],
                         "011 stopper1 bit0 B1":["NZ","000 stopper0 bit0"],"011 stopper1 bit1 A1":["NONE","FAILURE"],
                         "011 stopper1 bit1 B0":["NZ","100 stopper0 bit1"],"011 stopper1 bit1 B1":["Z","000 stopper0 bit0"],
                         "100 stopper0 bit0 A1":["NONE","100 stopper1 bit1"],"100 stopper0 bit0 B0":["Z","100 stopper0 bit1"],
                         "100 stopper0 bit0 B1":["NZ","100 stopper0 bit1"],"100 stopper0 bit1 A1":["NONE","100 stopper1 bit0"],
                         "100 stopper0 bit1 B0":["NZ","100 stopper0 bit1"],"100 stopper0 bit1 B1":["Z","100 stopper0 bit1"],
                         "100 stopper1 bit0 A1":["NONE","FAILURE"],"100 stopper1 bit0 B0":["Z","000 stopper0 bit0"],
                         "100 stopper1 bit0 B1":["NZ","100 stopper0 bit1"],"100 stopper1 bit1 A1":["NONE","FAILURE"],
                         "100 stopper1 bit1 B0":["NZ","000 stopper0 bit0"],"100 stopper1 bit1 B1":["Z","100 stopper0 bit1"],
                         "101 stopper0 bit0 A1":["NONE","101 stopper1 bit1"],"101 stopper0 bit0 B0":["Z","100 stopper0 bit1"],
                                        "101 stopper0 bit0 B1":["NZ","100 stopper0 bit1"],"101 stopper0 bit1 A1":["NONE","101 stopper1 bit0"],
                         "101 stopper0 bit1 B0":["NZ","100 stopper0 bit1"],"101 stopper0 bit1 B1":["Z","100 stopper0 bit1"],
                         "101 stopper1 bit0 A1":["NONE","FAILURE"],"101 stopper1 bit0 B0":["Z","100 stopper0 bit1"],
                         "101 stopper1 bit0 B1":["NZ","000 stopper0 bit0"],"101 stopper1 bit1 A1":["NONE","FAILURE"],
                         "101 stopper1 bit1 B0":["NZ","100 stopper0 bit1"],"101 stopper1 bit1 B1":["Z","000 stopper0 bit0"],
                         "110 stopper0 bit0 A1":["NONE","110 stopper1 bit1"],"110 stopper0 bit0 B0":["Z","000 stopper0 bit0"],
                         "110 stopper0 bit0 B1":["NZ","100 stopper0 bit1"],"110 stopper0 bit1 A1":["NONE","110 stopper1 bit0"],
                         "110 stopper0 bit1 B0":["NZ","000 stopper0 bit0"],"110 stopper0 bit1 B1":["Z","100 stopper0 bit1"],
                         "110 stopper1 bit0 A1":["NONE","FAILURE"],"110 stopper1 bit0 B0":["Z","100 stopper0 bit1"],
                         "110 stopper1 bit0 B1":["NZ","100 stopper0 bit1"],"110 stopper1 bit1 A1":["NONE","FAILURE"],
                         "110 stopper1 bit1 B0":["NZ","100 stopper0 bit1"],"110 stopper1 bit1 B1":["Z","100 stopper0 bit1"],
                         "111 stopper0 bit0 A1":["NONE","111 stopper1 bit1"],"111 stopper0 bit0 B0":["Z","100 stopper0 bit1"],
                         "111 stopper0 bit0 B1":["NZ","000 stopper0 bit0"],"111 stopper0 bit1 A1":["NONE","111 stopper1 bit0"],
                         "111 stopper0 bit1 B0":["NZ","100 stopper0 bit1"],"111 stopper0 bit1 B1":["Z","000 stopper0 bit0"],
                         "111 stopper1 bit0 A1":["NONE","FAILURE"],"111 stopper1 bit0 B0":["Z","100 stopper0 bit1"],
                         "111 stopper1 bit0 B1":["NZ","100 stopper0 bit1"],"111 stopper1 bit1 A1":["NONE","FAILURE"],
                                        "111 stopper1 bit1 B0":["NZ","100 stopper0 bit1"],"111 stopper1 bit1 B1":["Z","100 stopper0 bit1"]}


proglines = (APGsembly + "\nEND OF PROGRAM; Z\nEND OF PROGRAM; NZ").split('\n')

# pre-processing to remove blank lines and comments, and deal with * / ZZ format
progonly = []
NZflag = 0

for line in proglines:
	if line.strip()!="" and line.strip()[:1]!="#":
		if NZflag == 0:
			Zline = line
			NZflag = 1
		else:
			NZflag = 0
			if line == "END OF PROGRAM; NZ":
				break
			
			# process the next pair of lines, make sure it's a matched Z + NZ set
			Zparts = Zline.split("; ")
			NZparts = line.split("; ")
			if Zparts[0]==NZparts[0]:
				if Zparts[1]=="Z" and NZparts[1]=="NZ":
					progonly += [Zline,line]
				else:
					g.note("Pre-processing failed on lines:\n" + Zline + "\n" + line + "\nNeed Z line followed by NZ line, or * / ZZ syntax.")
					g.exit()
			else:
				if Zparts[1]=="*":
					progonly += [Zline.replace("*","Z"),Zline.replace("*","NZ")]
					Zline = line
					NZflag = 1
				elif Zparts[1]=="ZZ":
					# in the line below, there's no .replace("; ZZ;","; Z;") in the compiler version,
					#         because we need to know whether to use ZNZ or onlyZ component...
					progonly += [Zline.replace("; ZZ;","; Z;"), Zparts[0]+"; NZ"]  
					Zline = line
					NZflag = 1
				else:
					g.note("Pre-processing failed on lines:\n" + Zline + "\n" + line + "\nNeed a Z and NZ line for each state, or * / ZZ syntax.")
					g.exit()

g.new(progname)
g.setrule("LifeHistory")
g.setcell(0,0,1)
g.fit()
g.setcell(0,0,0)
g.update()
runflag = 0

def check_keyboard():
	global runflag
	while 1:
		evt = g.getevent()
		if evt !="":
			g.show(state + " -- " + nextstate + " :: " + instr + "; regs=" + str(registers)  + " -- 'r' to toggle run mode, any key to step")
		if evt == "key q none":
			g.setclipstr(s)
			g.exit()
		if evt == "key r none":
			runflag = 1-runflag
		elif evt=="key g none":
			break
		else:
			g.doevent(evt)
		if runflag == 1:
			break

# every state has a Z and NZ jump instruction to following states,
#        so the order of the program lines doesn't really matter.
#        Turn the program into a dictionary.
for item in progonly:
        fourparts = item.replace(", ",",").split("; ") 
        if len(fourparts) != 4:
                if len(fourparts) == 2:
                                # this is probably an auto-generated line for a state+Z/NZ combination that will never be reached
                                # ... so we'll try including it with empty jump and action values, and just see if it works.
                                fourparts += ["none",""]
                else:
                                g.note("Failed to parse: " + item)
                                g.exit()
        label, bitval, nextstate, instr = fourparts
        program[label+";"+bitval]=[nextstate,instr]

state, nextstate, nextoutput, outputtext = "START","INITIAL","Z",""

g.show(state + " -- " + nextstate + " :: " + instr + "; regs=" + str(registers)  + " -- 'r' to toggle run mode, any key to step")

def writeat(x0, cnt):
        g.select([x0, 10, 40, 10])
        g.clear(0)
        Write(str(cnt), x0, 10)
        g.select([])
        g.update()
        
def regist(reg):
	global lastx 
	global reg2x
	
	if reg not in reg2x:
		reg2x[reg]=lastx 
		Write(reg, lastx)
		lastx += 40
                
def initreg(reg):
	regist(reg)
	g.setcell(reg2x[reg], -10, 1)
	g.setcell(reg2x[reg] - 1, - 10, 3)
	writeat(reg2x[reg], 0)

regist("MUL")
regist("SUB")
regist("ADD")

Rregs = [] 
Tregs = [] 

for line in proglines:
	if line.strip()!="" and line.strip()[:1]!="#" and len(line.split(";")) == 4:
		regs = (line.split(";")[3]).replace("READ", "").replace("OUTPUT", "").replace("TDEC", "").replace("DEC", "").replace("INC", "").replace("RESET", "").replace("SET", "").replace("NOP", "").replace(" ", "").split(",")
        
        for reg in regs:
			if reg.startswith("R") and reg not in Rregs:
				Rregs.append(reg)
			
			if reg.startswith("T") and reg not in Tregs:
				Tregs.append(reg)
				
for reg in registers:
	if reg.startswith("R") and reg not in Rregs:
		Rregs.append(reg)
	
	if reg.startswith("T") and reg not in Tregs:
		Tregs.append(reg)
		
Tregs.sort()
Rregs.sort()

for r in Rregs:
	regist(r)
        
for r in Tregs:
	initreg(r)

arm_sqx0 = lastx
arm_sqy0 = -10
sqx0 = arm_sqx0 + 1
sqy0 = arm_sqy0 - 1

g.setcell(arm_sqx0, arm_sqy0, 2)
g.setcell(sqx0, arm_sqy0, 3)
g.setcell(arm_sqx0, sqy0, 3)

regist("SQX")
regist("SQY")


for reg in registers:
	if reg.startswith("R"):
		cnt = registers[reg]	
		for i in range(cnt):
			g.setcell(reg2x[reg], -10-i, 1)
		writeat(reg2x[reg], cnt)
	if reg.startswith("T"):
		ptr,bits = registers[reg]
		g.setcell(reg2x[reg] - 1, -10, 0)
		g.setcell(reg2x[reg] - 1, -10-ptr, 3)
		
		for i in range(len(bits)):
			g.setcell(reg2x[reg], -10-i, 1 + int(bits[i]) - int('0'))
		
		writeat(reg2x[reg], ptr)
	
check_keyboard()

while 1:

	if nextoutput == "":
			g.show(state + " -- " + nextstate + " :: " + instr + "; regs=" + str(registers)  + "; mem=" + str(memory))
			g.note("Program reached halt state (because no bit value was returned by any instruction).")
			g.setclipstr(s)
			g.exit()
	
	state = nextstate + ";" + nextoutput
	# get info from program dictionary, move to next state
	nextstate, instr = program[state]

	# process instructions for current state
	# -- there may be just one instruction,
	#         or several comma-separated instructions
	nextoutput = ""  # if some instruction doesn't set this variable, the program will halt
	for i in instr.split(","):
		# allow stepping or full-speed run from keyboard (toggle "r")
		check_keyboard()

		if i == "NOP":
				nextoutput = "Z"

		elif i == "READ SQ":
			if "SQX" not in registers: 
					registers["SQX"], registers["SQY"]=0,0  # initialize if necessary
			
			coord = str(registers["SQX"]) +","+str(registers["SQY"])
					
			if coord not in memory:
				memory[coord]=0
			if memory[coord]==0:
				nextoutput = "Z"
			else:
				nextoutput = "NZ"
				memory[coord] = 0  # this is a destructive read operation
		
			sqx = sqx0 + registers["SQX"]
			sqy = sqy0 - registers["SQY"]
			g.setcell(sqx, sqy, 0)
			g.update()
			
		elif i == "SET SQ":
			if "SQX" not in registers: 
					registers["SQX"], registers["SQY"]=0,0  # initialize if necessary
			
			coord = str(registers["SQX"]) +","+str(registers["SQY"])
			
			if coord not in memory:
					memory[coord]=0
			if memory[coord]==0:
					memory[coord] = 1
				   
			else:
					g.note("PROGRAM ERROR:\nTried to set memory coordinate " + coord + "to 1,\nwhen it was already 1.")
					g.exit()
					
			sqx = sqx0 + registers["SQX"]
			sqy = sqy0 - registers["SQY"]
			g.setcell(sqx, sqy, 1)
			g.update()
				
		elif i[:4]=="INC ":
			reg = i.split(" ")[1]
			
			if reg.startswith("SQ") and "SQX" not in registers:
				registers["SQX"], registers["SQY"]=0,0  # initialize if necessary
			
			if reg not in registers:
				if reg[:1]=="T": # binary register
					registers[reg]=[0,"0"]
				else:
					registers[reg]=0 # simple register
			if isinstance(registers[reg], types.ListType): # binary register
				ptr,bits = registers[reg]
				if ptr == len(bits)-1:
					bits+="0"                                # the mechanism automatically adds a zero when INCing past current end of tape
					g.setcell(reg2x[reg], -9-len(bits), 1)
					nextoutput = "Z"  # ... and it returns a zero output in that case
				else:
					nextoutput = "NZ" # if it's not creating a new bit, it returns an NZ output.  TODO: what does the program use this for?
				registers[reg] = [ptr+1,bits]
				
				g.setcell(reg2x[reg] - 1, -10-ptr, 0)
				g.setcell(reg2x[reg] - 1, -11-ptr, 3)
				writeat(reg2x[reg], ptr+1)
			else:
				if reg.startswith("SQ") and "SQX" not in registers:
					registers["SQX"], registers["SQY"]=0,0  # initialize if necessary
		
				registers[reg] += 1  # simple register
				writeat(reg2x[reg], registers[reg])
				
				if reg.startswith("R"):
					cnt = registers[reg]
					g.setcell(reg2x[reg], -10-cnt, 1)
					writeat(reg2x[reg], cnt)
				elif reg == "SQX":
					sqx = sqx0 + registers["SQX"] - 1
					sqy = sqy0 - registers["SQY"]
	
					g.setcell(sqx, arm_sqy0, 2)
					sqx += 1
					g.setcell(sqx, arm_sqy0, 3)
					g.update()
				elif reg == "SQY":
					sqx = sqx0 + registers["SQX"]
					sqy = sqy0 - registers["SQY"] + 1
	
					g.setcell(arm_sqx0, sqy, 2)
					sqy -= 1
					g.setcell(arm_sqx0, sqy, 3)
					g.update()
							
		elif i[:5]=="TDEC " or i[:6]=="DEC SQ": # simple register
			reg = i.split(" ")[1]
			
			if reg.startswith("SQ") and "SQX" not in registers:
				registers["SQX"], registers["SQY"]=0,0  # initialize if necessary
			
			if reg not in registers:
				registers[reg]=0
			if registers[reg] == 0:
				nextoutput = "Z" # don't update register, it's already zero
				cnt = 0
				w = 0 
			else:
				registers[reg] -= 1
				nextoutput = "NZ"
				cnt = registers[reg] 
				w = cnt + 1
		
			writeat(reg2x[reg], cnt)
					
			if reg.startswith("R"):
				g.setcell(reg2x[reg], -10-w, 0)
					
			elif reg == "SQX":
				sqx = sqx0 + registers["SQX"] + 1
				sqy = sqy0 - registers["SQY"]
		
				g.setcell(sqx, arm_sqy0, 0)
				sqx -= 1
				g.setcell(sqx, arm_sqy0, 3)
				g.update()
			
			elif reg == "SQY":
				sqx = sqx0 + registers["SQX"]
				sqy = sqy0 - registers["SQY"] - 1
		
				g.setcell(arm_sqx0, sqy, 0)
				sqy += 1
				g.setcell(arm_sqx0, sqy, 3)
				g.update()
				
		elif i[:4]=="DEC ": # binary register
			reg = i.split(" ")[1]
			ptr,bits = registers[reg]
			if ptr == 0:
				nextoutput = "Z" # don't update register, it's already zero
			else:
				registers[reg] = [ptr-1,bits]
				g.setcell(reg2x[reg] - 1, -10-ptr, 0)
				g.setcell(reg2x[reg] - 1, -9-ptr, 3)
				writeat(reg2x[reg], ptr - 1)
				
				nextoutput = "NZ"         

		elif i=="HALT":
			g.note("Program reached halt state.")
			g.setclipstr(s)
			g.exit()

		elif i[:4]=="MUL ":
			bit = str(i[4:])
			if "MUL" not in registers:
					registers["MUL"]="00000"
			nextoutput, registers["MUL"] = mullookup["MUL" + bit + " " + registers["MUL"]]
			
			for i in range(5): 
				if registers["MUL"][i] == '0':
					g.setcell(reg2x["MUL"], -10 - i, 2)
				else:
					g.setcell(reg2x["MUL"], -10 - i, 1)
				
		elif i[:7] == "OUTPUT ":
			outputtext += i[7:]
			Write(outputtext, 0, 40)
			g.update()

		elif i[:4]=="SUB ":
			if "SUB" not in registers:
				registers["SUB"]="000 stopper0 bit0"
			whichinput = i[4:]
			out, registers["SUB"] = sublookup[registers["SUB"] + " " + whichinput]
			if registers["SUB"] == "FAILURE":
				g.note("Program crashed at line '" + i + "'.  SUB A1 must have been run twice (?).")
				g.exit()
			if out != "NONE":
				nextoutput = out
			
			idxs = [0,1,2,11,16]
			for i in range(4): 
				if registers["SUB"][idxs[i]] == '0':
					g.setcell(reg2x["SUB"], -10 - i, 2)
				else:
					g.setcell(reg2x["SUB"], -10 - i, 1)
					
		elif i[:4]=="ADD ":
			if "ADD" not in registers:
				registers["ADD"]="000 bit0"
			whichinput = i[4:]
			temp = registers["ADD"] + " " + whichinput
			out, registers["ADD"] = addlookup[temp]
			if out != "NONE":
				nextoutput = out
			
			idxs = [0,1,2,7]
			for i in range(4): 
				if registers["ADD"][idxs[i]] == '0':
					g.setcell(reg2x["ADD"], -10 - i, 2)
				else:
					g.setcell(reg2x["ADD"], -10 - i, 1)
					
		elif i[:5]=="READ ":
			binregname = i[5:] # TODO: maybe be consistent and use .split()?
			if binregname not in registers:
				registers[binregname]=[0,"0"]
				initreg(binregname)
			ptr, bits = registers[binregname]
			if bits[ptr]=="x":
				g.note("Program crashed on instruction '" + i + "':\n attempt to read an empty position in a binary register.")
				g.exit()
			elif bits[ptr]=="0":
				nextoutput = "Z"
			elif bits[ptr]=="1":
				nextoutput = "NZ"
			else:
				g.note("Emulator error. Found value '" + bits[ptr] + "' on READ, in " + binregname + " bitstring -- " + str(registers[binregname]) + ".")
				g.exit()
			registers[binregname] = [ptr, bits[:ptr]+"x"+bits[ptr+1:]]
			g.setcell(reg2x[binregname], -10-ptr, 4)
			g.update()

		elif i[:4]=="SET ":
			binregname = i[4:]
			if binregname not in registers:
				registers[binregname]=[0,"0"]
				initreg(binregname)
			ptr, bits = registers[binregname]
			if bits[ptr]!="x":
				g.note("Crash. Found value '" + bits[ptr] + "' on SET, in " + binregname + " bitstring -- " + str(registers[binregname]) + ".")
				g.exit()
			registers[binregname] = [ptr, bits[:ptr]+"1"+bits[ptr+1:]]
			g.setcell(reg2x[binregname], -10-ptr, 2)
			g.update()

		elif i[:6]=="RESET ":
			binregname = i[6:]
			if binregname not in registers:
				registers[binregname]=[0,"0"]
				initreg(binregname)
			else:
				ptr, bits = registers[binregname]
			if bits[ptr]!="x":
				g.note("Crash. Found value '" + bits[ptr] + "' on READ, in " + binregname + " bitstring -- " + str(registers[binregname]) + ".")
				g.exit()
			registers[binregname] = [ptr, bits[:ptr]+"0"+bits[ptr+1:]]
			g.setcell(reg2x[binregname], -10-ptr, 1)
			g.update()

		else:
			g.note("Unknown instruction: " + instr + " -- ~" + i + "~")
			g.exit()